// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NurseNotes.Context;

#nullable disable

namespace NurseNotes.Migrations
{
    [DbContext(typeof(TestDbNurseNotes))]
    [Migration("20240930034841_AdjustRepositories")]
    partial class AdjustRepositories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NurseNotes.Model.Folios", b =>
                {
                    b.Property<int>("FOLIO_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FOLIO_ID"));

                    b.Property<string>("EVOLUTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncomesINCOME_ID")
                        .HasColumnType("int");

                    b.Property<int>("NurseNoteNOTE_ID")
                        .HasColumnType("int");

                    b.Property<int>("UsersUSR_ID")
                        .HasColumnType("int");

                    b.HasKey("FOLIO_ID");

                    b.HasIndex("IncomesINCOME_ID");

                    b.HasIndex("NurseNoteNOTE_ID");

                    b.HasIndex("UsersUSR_ID");

                    b.ToTable("Folios");
                });

            modelBuilder.Entity("NurseNotes.Model.Incomes", b =>
                {
                    b.Property<int>("INCOME_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("INCOME_ID"));

                    b.HasKey("INCOME_ID");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("NurseNotes.Model.NurseNote", b =>
                {
                    b.Property<int>("NOTE_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NOTE_ID"));

                    b.Property<int>("PatientsPATIENT_ID")
                        .HasColumnType("int");

                    b.Property<string>("REASONCONS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersUSR_ID")
                        .HasColumnType("int");

                    b.HasKey("NOTE_ID");

                    b.HasIndex("PatientsPATIENT_ID");

                    b.HasIndex("UsersUSR_ID");

                    b.ToTable("NurseNotes");
                });

            modelBuilder.Entity("NurseNotes.Model.PatientRecords", b =>
                {
                    b.Property<int>("PATR_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PATR_ID"));

                    b.Property<bool?>("ALLERGIES")
                        .HasColumnType("bit");

                    b.Property<string>("ALLERG_DSC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncomesINCOME_ID")
                        .HasColumnType("int");

                    b.Property<string>("RH")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SURGERIES")
                        .HasColumnType("bit");

                    b.Property<string>("SURGER_DSC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PATR_ID");

                    b.HasIndex("IncomesINCOME_ID");

                    b.ToTable("PatientRecords");
                });

            modelBuilder.Entity("NurseNotes.Model.Patients", b =>
                {
                    b.Property<int>("PATIENT_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PATIENT_ID"));

                    b.Property<int>("AGE")
                        .HasColumnType("int");

                    b.Property<string>("LASTNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NUMCONTACT")
                        .HasColumnType("int");

                    b.Property<int>("NUMDOC")
                        .HasColumnType("int");

                    b.HasKey("PATIENT_ID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("NurseNotes.Model.Users", b =>
                {
                    b.Property<int>("USR_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("USR_ID"));

                    b.Property<DateTime>("FCHCREATION")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("LASTNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NUMDOC")
                        .HasColumnType("int");

                    b.Property<string>("TIPDOC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USRPSW")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("USR_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NurseNotes.Model.UsersLogs", b =>
                {
                    b.Property<int>("LOG_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LOG_ID"));

                    b.Property<DateTime>("FCHMOD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("USRMOD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersUSR_ID")
                        .HasColumnType("int");

                    b.HasKey("LOG_ID");

                    b.HasIndex("UsersUSR_ID");

                    b.ToTable("UsersLogs");
                });

            modelBuilder.Entity("NurseNotes.Model.Folios", b =>
                {
                    b.HasOne("NurseNotes.Model.Incomes", "Incomes")
                        .WithMany()
                        .HasForeignKey("IncomesINCOME_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NurseNotes.Model.NurseNote", "NurseNote")
                        .WithMany()
                        .HasForeignKey("NurseNoteNOTE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NurseNotes.Model.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersUSR_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incomes");

                    b.Navigation("NurseNote");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NurseNotes.Model.NurseNote", b =>
                {
                    b.HasOne("NurseNotes.Model.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientsPATIENT_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NurseNotes.Model.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersUSR_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("NurseNotes.Model.PatientRecords", b =>
                {
                    b.HasOne("NurseNotes.Model.Incomes", "Incomes")
                        .WithMany()
                        .HasForeignKey("IncomesINCOME_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incomes");
                });

            modelBuilder.Entity("NurseNotes.Model.UsersLogs", b =>
                {
                    b.HasOne("NurseNotes.Model.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersUSR_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
